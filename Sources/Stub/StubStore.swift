//
//  StubStore.swift
//  Stub
//
//  Created by tokijh on 2022/04/18.
//  Copyright Â© 2022 tokijh. All rights reserved.
//

import Foundation

public final class StubStore {

  // MARK: Module

  public enum PublicKey: Hashable {
    case custom(String)
  }
  fileprivate enum PrivateKey: Hashable {
    case autoGenerated(String)
    case custom(String)
  }
  public typealias Function = Any


  // MARK: Properties

  private var stubs: [PrivateKey: AnyStub] = [:]


  // MARK: Initializer

  public init() { }

}


// MARK: Stub

extension StubStore {

  private func stub<Arguments, Result>(
    privateKey key: PrivateKey,
    arguments: Arguments.Type,
    result: Result.Type
  ) -> Stub<Arguments, Result> {
    if let stub = stubs[key] as? Stub<Arguments, Result> {
      return stub
    } else {
      let stub = Stub(arguments: arguments, result: result)
      stubs[key] = stub
      return stub
    }
  }

  public func stub<Arguments, Result>(
    key: PublicKey,
    arguments: Arguments.Type,
    result: Result.Type
  ) -> Stub<Arguments, Result> {
    let privateKey = key.toPrivateKey()
    return stub(privateKey: privateKey, arguments: arguments, result: result)
  }

  public func stub<Arguments, Result>(
    arguments: Arguments.Type,
    result: Result.Type
  ) -> Stub<Arguments, Result> {
    let privateKey = PrivateKey.generate(arguments: arguments, result: result)
    return stub(privateKey: privateKey, arguments: arguments, result: result)
  }

}


#if swift(>=5.6) && canImport(_Concurrency)

// MARK: AsyncStub

extension StubStore {

  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  private func asyncStub<Arguments, Result>(
    privateKey key: PrivateKey,
    arguments: Arguments.Type,
    result: Result.Type
  ) -> AsyncStub<Arguments, Result> {
    if let stub = stubs[key] as? AsyncStub<Arguments, Result> {
      return stub
    } else {
      let stub = AsyncStub(arguments: arguments, result: result)
      stubs[key] = stub
      return stub
    }
  }

  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func asyncStub<Arguments, Result>(
    key: PublicKey,
    arguments: Arguments.Type,
    result: Result.Type
  ) -> AsyncStub<Arguments, Result> {
    let privateKey = key.toPrivateKey()
    return asyncStub(privateKey: privateKey, arguments: arguments, result: result)
  }

  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func asyncStub<Arguments, Result>(
    arguments: Arguments.Type,
    result: Result.Type
  ) -> AsyncStub<Arguments, Result> {
    let privateKey = PrivateKey.generate(arguments: arguments, result: result)
    return asyncStub(privateKey: privateKey, arguments: arguments, result: result)
  }

}

#endif


// MARK: Key

extension StubStore.PrivateKey {
  fileprivate static func generate<Arguments, Result>(
    arguments: Arguments.Type,
    result: Result.Type
  ) -> StubStore.PrivateKey {
    let functionType = ((Arguments) throws -> Result).self
    return .autoGenerated(String(describing: functionType))
  }
}

extension StubStore.PublicKey {
  fileprivate func toPrivateKey() -> StubStore.PrivateKey {
    switch self {
    case let .custom(key):
      return .custom(key)
    }
  }
}
